// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WMS_backend.Data;

#nullable disable

namespace WMS_backend.Migrations
{
    [DbContext(typeof(WMSDbContext))]
    [Migration("20240624033554_remove-admin")]
    partial class removeadmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WMS_backend.Models.DBModels.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("companyid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.HasKey("CompanyId")
                        .HasName("pk_company");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.CompanyPermission", b =>
                {
                    b.Property<Guid>("CompanyPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("companypermissionid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("companyid");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer")
                        .HasColumnName("permissiontype");

                    b.HasKey("CompanyPermissionId")
                        .HasName("pk_companypermission");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_companypermission_companyid");

                    b.ToTable("companypermission", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("inventoryid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirationdate");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddatetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RackId")
                        .HasColumnType("uuid")
                        .HasColumnName("rackid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<int>("XSlot")
                        .HasColumnType("integer")
                        .HasColumnName("xslot");

                    b.Property<int>("YSlot")
                        .HasColumnType("integer")
                        .HasColumnName("yslot");

                    b.HasKey("InventoryId")
                        .HasName("pk_inventory");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_inventory_productid");

                    b.HasIndex("RackId")
                        .HasDatabaseName("ix_inventory_rackid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_inventory_userid");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("locationid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("companyid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<int>("LocationType")
                        .HasColumnType("integer")
                        .HasColumnName("locationtype");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.HasKey("LocationId")
                        .HasName("pk_location");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_location_companyid");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("notificationid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("notificationtype");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("NotificationId")
                        .HasName("pk_notification");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notification_userid");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PermissionType", b =>
                {
                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("permissiontypeid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("PermissionTypeId")
                        .HasName("pk_permissiontype");

                    b.ToTable("permissiontype", (string)null);

                    b.HasData(
                        new
                        {
                            PermissionTypeId = 4,
                            Name = "Order"
                        },
                        new
                        {
                            PermissionTypeId = 13,
                            Name = "Inbound"
                        },
                        new
                        {
                            PermissionTypeId = 20,
                            Name = "Putaway"
                        },
                        new
                        {
                            PermissionTypeId = 30,
                            Name = "Quality"
                        },
                        new
                        {
                            PermissionTypeId = 40,
                            Name = "Outbound"
                        },
                        new
                        {
                            PermissionTypeId = 50,
                            Name = "Picking"
                        },
                        new
                        {
                            PermissionTypeId = 60,
                            Name = "Packing"
                        },
                        new
                        {
                            PermissionTypeId = 70,
                            Name = "Shipping"
                        },
                        new
                        {
                            PermissionTypeId = 80,
                            Name = "Product"
                        },
                        new
                        {
                            PermissionTypeId = 90,
                            Name = "Stock"
                        },
                        new
                        {
                            PermissionTypeId = 95,
                            Name = "Location"
                        },
                        new
                        {
                            PermissionTypeId = 100,
                            Name = "PurchaseOrder"
                        },
                        new
                        {
                            PermissionTypeId = 110,
                            Name = "PurchaseRequest"
                        },
                        new
                        {
                            PermissionTypeId = 120,
                            Name = "Supplier"
                        },
                        new
                        {
                            PermissionTypeId = 130,
                            Name = "ReportOrder"
                        },
                        new
                        {
                            PermissionTypeId = 140,
                            Name = "ReportPurchaseOrder"
                        },
                        new
                        {
                            PermissionTypeId = 150,
                            Name = "ReportInventory"
                        },
                        new
                        {
                            PermissionTypeId = 170,
                            Name = "ManageCompany"
                        },
                        new
                        {
                            PermissionTypeId = 180,
                            Name = "ManageTeam"
                        });
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("productid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode");

                    b.Property<string>("Barcode1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode1");

                    b.Property<string>("Barcode2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode2");

                    b.Property<string>("Barcode3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode3");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("real")
                        .HasColumnName("purchaseprice");

                    b.Property<float>("RetailPrice")
                        .HasColumnType("real")
                        .HasColumnName("retailprice");

                    b.Property<string>("SKU")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sku");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.Property<float>("TaxRate")
                        .HasColumnType("real")
                        .HasColumnName("taxrate");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<double?>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width");

                    b.HasKey("ProductId")
                        .HasName("pk_product");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_product_supplierid");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("purchaseorderid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expecteddate");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("locationid");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddatetime");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("note");

                    b.Property<int>("POStatus")
                        .HasColumnType("integer")
                        .HasColumnName("postatus");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purchaseordernumber");

                    b.Property<float>("Shipping")
                        .HasColumnType("real")
                        .HasColumnName("shipping");

                    b.Property<string>("ShippingCarrier")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shippingcarrier");

                    b.Property<float>("Subtotal")
                        .HasColumnType("real")
                        .HasColumnName("subtotal");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.Property<float>("Tax")
                        .HasColumnType("real")
                        .HasColumnName("tax");

                    b.Property<float>("Total")
                        .HasColumnType("real")
                        .HasColumnName("total");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("trackingnumber");

                    b.Property<int>("UnitOrders")
                        .HasColumnType("integer")
                        .HasColumnName("unitorders");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("PurchaseOrderId")
                        .HasName("pk_purchaseorder");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_purchaseorder_locationid");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_purchaseorder_supplierid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_purchaseorder_userid");

                    b.ToTable("purchaseorder", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("PurchaseOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("purchaseorderitemid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchaseorderid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("PurchaseOrderItemId")
                        .HasName("pk_purchaseorderitem");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_purchaseorderitem_productid");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_purchaseorderitem_purchaseorderid");

                    b.ToTable("purchaseorderitem", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseRequest", b =>
                {
                    b.Property<Guid>("PurchaseRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("purchaserequestid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("MessageFromTeam")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("messagefromteam");

                    b.Property<string>("MessageToTeam")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("messagetoteam");

                    b.Property<int>("Staus")
                        .HasColumnType("integer")
                        .HasColumnName("staus");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("teamid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("PurchaseRequestId")
                        .HasName("pk_purchaserequest");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_purchaserequest_teamid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_purchaserequest_userid");

                    b.ToTable("purchaserequest", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Rack", b =>
                {
                    b.Property<Guid>("RackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("rackid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<Guid>("LoactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("loactionid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("locationid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("XSlotMax")
                        .HasColumnType("integer")
                        .HasColumnName("xslotmax");

                    b.Property<int>("YSlotMax")
                        .HasColumnType("integer")
                        .HasColumnName("yslotmax");

                    b.HasKey("RackId")
                        .HasName("pk_rack");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_rack_locationid");

                    b.ToTable("rack", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("teamid");

                    b.HasKey("SupplierId")
                        .HasName("pk_supplier");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_supplier_teamid");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("teamid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("companyid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("TeamId")
                        .HasName("pk_team");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_team_companyid");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.TeamLocation", b =>
                {
                    b.Property<Guid>("TeamLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("teamlocationid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("locationid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("teamid");

                    b.HasKey("TeamLocationId")
                        .HasName("pk_teamlocation");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_teamlocation_locationid");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_teamlocation_teamid");

                    b.ToTable("teamlocation", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.TeamUser", b =>
                {
                    b.Property<Guid>("TeamUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("teamuserid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("teamid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("TeamUserId")
                        .HasName("pk_teamuser");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_teamuser_teamid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_teamuser_userid");

                    b.ToTable("teamuser", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("companyid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastlogindatetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddatetime");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("modifieduserid");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("passwordhash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea")
                        .HasColumnName("passwordsalt");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.HasKey("UserId")
                        .HasName("pk_user");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_user_companyid");

                    b.HasIndex("ModifiedUserId")
                        .HasDatabaseName("ix_user_modifieduserid");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.UserPermission", b =>
                {
                    b.Property<Guid>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userpermissionid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsCrud")
                        .HasColumnType("boolean")
                        .HasColumnName("iscrud");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer")
                        .HasColumnName("permissiontype");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("UserPermissionId")
                        .HasName("pk_userpermission");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userpermission_userid");

                    b.ToTable("userpermission", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.UserPreference", b =>
                {
                    b.Property<Guid>("UserPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userpreferenceid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("PreferenceType")
                        .HasColumnType("integer")
                        .HasColumnName("preferencetype");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("UserPreferenceId")
                        .HasName("pk_userpreference");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userpreference_userid");

                    b.ToTable("userpreference", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.CompanyPermission", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("CompanyPermissions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_companypermission_company_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Inventory", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_product_productid");

                    b.HasOne("WMS_backend.Models.DBModels.Rack", "Rack")
                        .WithMany("Inventories")
                        .HasForeignKey("RackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_rack_rackid");

                    b.HasOne("WMS_backend.Models.DBModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_user_userid");

                    b.Navigation("Product");

                    b.Navigation("Rack");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Location", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_company_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Notification", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_user_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Product", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_product_supplier_supplierid");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrder", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Location", "Location")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorder_location_locationid");

                    b.HasOne("WMS_backend.Models.DBModels.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorder_supplier_supplierid");

                    b.HasOne("WMS_backend.Models.DBModels.User", "User")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorder_user_userid");

                    b.Navigation("Location");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrderItem", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorderitem_product_productid");

                    b.HasOne("WMS_backend.Models.DBModels.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorderitem_purchaseorder_purchaseorderid");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseRequest", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Team", "Team")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaserequest_team_teamid");

                    b.HasOne("WMS_backend.Models.DBModels.User", "User")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaserequest_user_userid");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Rack", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rack_location_locationid");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Supplier", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Team", "Team")
                        .WithMany("Suppliers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_supplier_team_teamid");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Team", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("Teams")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_company_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.TeamLocation", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Location", "Location")
                        .WithMany("TeamLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teamlocation_location_locationid");

                    b.HasOne("WMS_backend.Models.DBModels.Team", "Team")
                        .WithMany("TeamLocations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teamlocation_team_teamid");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.TeamUser", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teamuser_team_teamid");

                    b.HasOne("WMS_backend.Models.DBModels.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teamuser_user_userid");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.User", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_user_company_companyid");

                    b.HasOne("WMS_backend.Models.DBModels.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId")
                        .HasConstraintName("fk_user_user_modifieduserid");

                    b.Navigation("Company");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.UserPermission", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpermission_user_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.UserPreference", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.User", "User")
                        .WithMany("UserPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpreference_user_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Company", b =>
                {
                    b.Navigation("CompanyPermissions");

                    b.Navigation("Locations");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Location", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("TeamLocations");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Rack", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Supplier", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Team", b =>
                {
                    b.Navigation("PurchaseRequests");

                    b.Navigation("Suppliers");

                    b.Navigation("TeamLocations");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseRequests");

                    b.Navigation("TeamUsers");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
