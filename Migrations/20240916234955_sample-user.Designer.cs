// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WMS_backend.Data;

#nullable disable

namespace WMS_backend.Migrations
{
    [DbContext(typeof(WMSDbContext))]
    [Migration("20240916234955_sample-user")]
    partial class sampleuser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claimvalue");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetroleclaims_roleid");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claimvalue");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserclaims_userid");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("providerdisplayname");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserlogins_userid");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetuserroles_roleid");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("concurrencystamp");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastlogindatetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddatetime");

                    b.Property<long?>("ModifiedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("modifieduserid");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_aspnetusers_companyid");

                    b.HasIndex("ModifiedUserId")
                        .HasDatabaseName("ix_aspnetusers_modifieduserid");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10000L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "3bb2589f-6a12-407e-81e6-9cac1cc83315",
                            CreatedDateTime = new DateTime(2024, 9, 16, 6, 3, 30, 10, DateTimeKind.Utc).AddTicks(8535),
                            Email = "Alivia_Effertz33@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Johnathan",
                            IsArchived = false,
                            LastName = "Lowe",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 7, 20, 40, 192, DateTimeKind.Utc).AddTicks(9098),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10001L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "a090a951-001b-49e5-8694-f818c15517c0",
                            CreatedDateTime = new DateTime(2024, 9, 16, 16, 15, 23, 432, DateTimeKind.Utc).AddTicks(3983),
                            Email = "Jeffry84@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Hertha",
                            IsArchived = false,
                            LastName = "MacGyver",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 20, 34, 59, 142, DateTimeKind.Utc).AddTicks(7741),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10002L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "1ec39218-d1ff-4ff4-8c7b-0f85035f307b",
                            CreatedDateTime = new DateTime(2024, 9, 16, 3, 26, 12, 971, DateTimeKind.Utc).AddTicks(3828),
                            Email = "Nestor_Crist75@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Wendell",
                            IsArchived = false,
                            LastName = "Hilpert",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 22, 35, 13, 346, DateTimeKind.Utc).AddTicks(7851),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10003L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "505e6b7c-566f-4c5b-bc9d-563dece17933",
                            CreatedDateTime = new DateTime(2024, 9, 16, 18, 0, 27, 360, DateTimeKind.Utc).AddTicks(5300),
                            Email = "Fay36@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Raquel",
                            IsArchived = false,
                            LastName = "Jaskolski",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 22, 30, 46, 903, DateTimeKind.Utc).AddTicks(3005),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10004L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "4d531bd2-d047-4e23-b3b4-e2cb39acc844",
                            CreatedDateTime = new DateTime(2024, 9, 16, 20, 27, 39, 428, DateTimeKind.Utc).AddTicks(3858),
                            Email = "Andy_Bogan38@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jarrod",
                            IsArchived = false,
                            LastName = "Hermann",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 23, 34, 10, 804, DateTimeKind.Utc).AddTicks(9448),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10005L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "8fb04652-93fa-4cab-bfd6-53f140d964df",
                            CreatedDateTime = new DateTime(2024, 9, 16, 10, 1, 54, 733, DateTimeKind.Utc).AddTicks(2050),
                            Email = "Dax5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Rigoberto",
                            IsArchived = false,
                            LastName = "Harber",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 10, 59, 21, 605, DateTimeKind.Utc).AddTicks(5591),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10006L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "6b29848f-ddbf-4f34-a337-170ab005eb60",
                            CreatedDateTime = new DateTime(2024, 9, 16, 9, 6, 47, 100, DateTimeKind.Utc).AddTicks(7403),
                            Email = "Lori.Greenholt25@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Waldo",
                            IsArchived = false,
                            LastName = "Kris",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 20, 7, 22, 370, DateTimeKind.Utc).AddTicks(1446),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10007L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "7a1542b6-39f5-42db-9dc6-80e8ab3fbfe4",
                            CreatedDateTime = new DateTime(2024, 9, 16, 11, 51, 50, 163, DateTimeKind.Utc).AddTicks(8340),
                            Email = "Elenora.Ziemann26@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mariah",
                            IsArchived = false,
                            LastName = "Hirthe",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 23, 25, 30, 517, DateTimeKind.Utc).AddTicks(3423),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10008L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "274787ea-d813-4138-aca8-b15b63e49e2b",
                            CreatedDateTime = new DateTime(2024, 9, 16, 0, 16, 18, 103, DateTimeKind.Utc).AddTicks(6745),
                            Email = "Violette62@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sophie",
                            IsArchived = false,
                            LastName = "Hackett",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 21, 57, 24, 647, DateTimeKind.Utc).AddTicks(6047),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10009L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "f9dd26a3-95d9-4fbe-8464-988c8bd3d74e",
                            CreatedDateTime = new DateTime(2024, 9, 16, 20, 51, 26, 938, DateTimeKind.Utc).AddTicks(5974),
                            Email = "Tito_Farrell@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Muriel",
                            IsArchived = false,
                            LastName = "Price",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 11, 41, 0, 108, DateTimeKind.Utc).AddTicks(7093),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10010L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "19f33503-8154-4808-b21b-37d4d9ab3f91",
                            CreatedDateTime = new DateTime(2024, 9, 16, 0, 9, 23, 488, DateTimeKind.Utc).AddTicks(3536),
                            Email = "Russell94@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Ted",
                            IsArchived = false,
                            LastName = "Metz",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 10, 8, 3, 996, DateTimeKind.Utc).AddTicks(3724),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10011L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "3e97d153-38d4-4606-9e56-b9865eff1359",
                            CreatedDateTime = new DateTime(2024, 9, 16, 23, 6, 7, 431, DateTimeKind.Utc).AddTicks(8995),
                            Email = "Alfreda59@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Erin",
                            IsArchived = false,
                            LastName = "Jakubowski",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 8, 35, 9, 442, DateTimeKind.Utc).AddTicks(606),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10012L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "e98378a2-421c-41ef-9736-608684ca8923",
                            CreatedDateTime = new DateTime(2024, 9, 16, 17, 27, 24, 920, DateTimeKind.Utc).AddTicks(8819),
                            Email = "Lonnie_Blick@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Freeda",
                            IsArchived = false,
                            LastName = "Runolfsson",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 17, 12, 54, 470, DateTimeKind.Utc).AddTicks(8857),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10013L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "d02510c5-c6ed-4b12-b1d8-bf2fa3114d76",
                            CreatedDateTime = new DateTime(2024, 9, 16, 10, 52, 12, 487, DateTimeKind.Utc).AddTicks(6766),
                            Email = "Demond18@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Christina",
                            IsArchived = false,
                            LastName = "Leffler",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 19, 50, 36, 351, DateTimeKind.Utc).AddTicks(3396),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10014L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "bdbb5dc7-2ae1-4452-91de-fd0df5d4eb3d",
                            CreatedDateTime = new DateTime(2024, 9, 16, 22, 43, 30, 224, DateTimeKind.Utc).AddTicks(5111),
                            Email = "Emmett.Jenkins@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jayme",
                            IsArchived = false,
                            LastName = "Runolfsson",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 3, 53, 30, 168, DateTimeKind.Utc).AddTicks(7346),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10015L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "1ad24e59-42bb-47d1-9477-e7d0d0f91439",
                            CreatedDateTime = new DateTime(2024, 9, 16, 23, 1, 49, 54, DateTimeKind.Utc).AddTicks(4437),
                            Email = "Marc_Kuhn@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sonia",
                            IsArchived = false,
                            LastName = "Satterfield",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 13, 15, 40, 910, DateTimeKind.Utc).AddTicks(2791),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10016L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "0a17c575-33c5-4c89-8988-7b6026583cf9",
                            CreatedDateTime = new DateTime(2024, 9, 16, 23, 23, 48, 842, DateTimeKind.Utc).AddTicks(8268),
                            Email = "Esteban67@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ulises",
                            IsArchived = false,
                            LastName = "Baumbach",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 15, 23, 50, 57, 97, DateTimeKind.Utc).AddTicks(2430),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10017L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "f3ff1003-17cc-4317-974c-5c8055bf9b30",
                            CreatedDateTime = new DateTime(2024, 9, 16, 1, 21, 2, 59, DateTimeKind.Utc).AddTicks(2424),
                            Email = "Sam_Stracke85@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Dale",
                            IsArchived = false,
                            LastName = "O'Conner",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 21, 58, 47, 901, DateTimeKind.Utc).AddTicks(7985),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10018L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "fcedf785-2874-4a2c-85c6-64239c321ce1",
                            CreatedDateTime = new DateTime(2024, 9, 16, 13, 14, 10, 703, DateTimeKind.Utc).AddTicks(3410),
                            Email = "Houston31@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Norberto",
                            IsArchived = false,
                            LastName = "Macejkovic",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 16, 57, 12, 700, DateTimeKind.Utc).AddTicks(8494),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10019L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "07ce6f50-fb78-495e-a6c6-1bf0c6da8ce1",
                            CreatedDateTime = new DateTime(2024, 9, 16, 5, 48, 37, 723, DateTimeKind.Utc).AddTicks(2520),
                            Email = "Bailee_McLaughlin@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Leonardo",
                            IsArchived = false,
                            LastName = "Hilll",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 11, 19, 5, 960, DateTimeKind.Utc).AddTicks(1901),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10020L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "3683cab6-eabf-4a25-9d29-1414abad114c",
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 2, 32, 579, DateTimeKind.Utc).AddTicks(2564),
                            Email = "Alycia.Jones@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Prudence",
                            IsArchived = false,
                            LastName = "MacGyver",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 3, 25, 55, 256, DateTimeKind.Utc).AddTicks(5600),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10021L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "a57ebf6f-9a15-4e8b-bc1a-f3d7cd28d0ba",
                            CreatedDateTime = new DateTime(2024, 9, 16, 15, 5, 0, 531, DateTimeKind.Utc).AddTicks(1825),
                            Email = "Ava.Hettinger89@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stephany",
                            IsArchived = false,
                            LastName = "Sporer",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 19, 25, 6, 1, DateTimeKind.Utc).AddTicks(2423),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10022L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "4ba21a63-b374-4c7a-a5b0-b073eae31f94",
                            CreatedDateTime = new DateTime(2024, 9, 16, 4, 26, 5, 983, DateTimeKind.Utc).AddTicks(3945),
                            Email = "Mervin76@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Dorian",
                            IsArchived = false,
                            LastName = "Hills",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 18, 1, 40, 155, DateTimeKind.Utc).AddTicks(6545),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10023L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "6c7646e1-ef74-4f28-888c-26ddd182d8d4",
                            CreatedDateTime = new DateTime(2024, 9, 16, 11, 39, 57, 882, DateTimeKind.Utc).AddTicks(6500),
                            Email = "Haskell_Nienow1@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Bulah",
                            IsArchived = false,
                            LastName = "Reynolds",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 18, 59, 3, 419, DateTimeKind.Utc).AddTicks(9078),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10024L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "61ce7a07-c422-4d46-a53c-4cf3f2558443",
                            CreatedDateTime = new DateTime(2024, 9, 16, 22, 10, 30, 271, DateTimeKind.Utc).AddTicks(2721),
                            Email = "Leopold_Gorczany@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Lew",
                            IsArchived = false,
                            LastName = "Christiansen",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 6, 49, 49, 890, DateTimeKind.Utc).AddTicks(8090),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10025L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "8771a8c0-4bc0-4f98-af7d-e1567bee4e85",
                            CreatedDateTime = new DateTime(2024, 9, 16, 7, 2, 2, 714, DateTimeKind.Utc).AddTicks(766),
                            Email = "Eudora33@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Hattie",
                            IsArchived = false,
                            LastName = "Hermiston",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 11, 6, 54, 138, DateTimeKind.Utc).AddTicks(3999),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10026L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "1b7855c0-33cc-4de8-a61a-846ed05b9b42",
                            CreatedDateTime = new DateTime(2024, 9, 16, 5, 43, 19, 66, DateTimeKind.Utc).AddTicks(1551),
                            Email = "Lenore68@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mohammad",
                            IsArchived = false,
                            LastName = "Casper",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 2, 37, 1, 238, DateTimeKind.Utc).AddTicks(6683),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10027L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "aaf0b324-7005-4b25-a106-1ad6cf76b068",
                            CreatedDateTime = new DateTime(2024, 9, 16, 1, 56, 15, 304, DateTimeKind.Utc).AddTicks(8047),
                            Email = "Ruthe_Wunsch@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Baron",
                            IsArchived = false,
                            LastName = "Renner",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 23, 8, 44, 895, DateTimeKind.Utc).AddTicks(9869),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10028L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "133a5986-15f8-4eec-a450-4943d8f1c4fc",
                            CreatedDateTime = new DateTime(2024, 9, 16, 7, 32, 12, 29, DateTimeKind.Utc).AddTicks(5654),
                            Email = "Myrtie51@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Arianna",
                            IsArchived = false,
                            LastName = "Parker",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 15, 40, 37, 945, DateTimeKind.Utc).AddTicks(5370),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10029L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "2d67ccab-7e2d-4d28-b9f6-89d4b70285cf",
                            CreatedDateTime = new DateTime(2024, 9, 16, 22, 43, 30, 569, DateTimeKind.Utc).AddTicks(9538),
                            Email = "Alexanne5@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Wilma",
                            IsArchived = false,
                            LastName = "Schamberger",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 6, 40, 33, 582, DateTimeKind.Utc).AddTicks(6487),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10030L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "bc1f1464-b85b-4637-a1a8-72ae5b316355",
                            CreatedDateTime = new DateTime(2024, 9, 16, 19, 20, 5, 144, DateTimeKind.Utc).AddTicks(9067),
                            Email = "Garrett.Denesik52@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Flavie",
                            IsArchived = false,
                            LastName = "Hintz",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 18, 14, 8, 594, DateTimeKind.Utc).AddTicks(5693),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10031L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "0de14bab-e969-446d-a1a8-57b09ec76429",
                            CreatedDateTime = new DateTime(2024, 9, 16, 9, 20, 49, 572, DateTimeKind.Utc).AddTicks(1872),
                            Email = "Marcus.Swaniawski7@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Jennie",
                            IsArchived = false,
                            LastName = "Rau",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 22, 47, 47, 324, DateTimeKind.Utc).AddTicks(9990),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10032L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "8e0eb6a2-a9db-42c2-b322-ff8af0a4d072",
                            CreatedDateTime = new DateTime(2024, 9, 16, 23, 47, 17, 162, DateTimeKind.Utc).AddTicks(9772),
                            Email = "Edmond88@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Ward",
                            IsArchived = false,
                            LastName = "Lehner",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 16, 22, 1, 206, DateTimeKind.Utc).AddTicks(29),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10033L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "7e77d9e4-8a3c-46c8-8f25-11541858a8ba",
                            CreatedDateTime = new DateTime(2024, 9, 16, 6, 29, 53, 578, DateTimeKind.Utc).AddTicks(6587),
                            Email = "Ahmed_Cruickshank58@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Theodora",
                            IsArchived = false,
                            LastName = "Wyman",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 16, 24, 33, 815, DateTimeKind.Utc).AddTicks(8824),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10034L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "edd8f96f-cb6a-428e-a60d-de8301fd6022",
                            CreatedDateTime = new DateTime(2024, 9, 16, 2, 1, 30, 325, DateTimeKind.Utc).AddTicks(9888),
                            Email = "Talon.Heathcote@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Anabel",
                            IsArchived = false,
                            LastName = "Weissnat",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 16, 38, 43, 873, DateTimeKind.Utc).AddTicks(2361),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10035L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "82e4b63a-57a9-4dca-b87e-71b757b77eff",
                            CreatedDateTime = new DateTime(2024, 9, 16, 14, 38, 3, 876, DateTimeKind.Utc).AddTicks(2188),
                            Email = "Vivian_Beahan98@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ernesto",
                            IsArchived = false,
                            LastName = "O'Connell",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 3, 35, 41, 141, DateTimeKind.Utc).AddTicks(5359),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10036L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "919db905-b1a7-4eaf-8759-08ae75f5c017",
                            CreatedDateTime = new DateTime(2024, 9, 16, 12, 0, 34, 452, DateTimeKind.Utc).AddTicks(7603),
                            Email = "Abdullah_Franecki@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Athena",
                            IsArchived = false,
                            LastName = "Lynch",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 10, 11, 7, 66, DateTimeKind.Utc).AddTicks(5729),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10037L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "ab275322-3c10-4416-a7c3-71c81487951b",
                            CreatedDateTime = new DateTime(2024, 9, 16, 5, 12, 27, 876, DateTimeKind.Utc).AddTicks(5376),
                            Email = "Muhammad37@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Lionel",
                            IsArchived = false,
                            LastName = "Raynor",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 1, 50, 17, 471, DateTimeKind.Utc).AddTicks(2761),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10038L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "7f9df11e-7049-41fd-91f7-d72df24f7ebf",
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 5, 47, 641, DateTimeKind.Utc).AddTicks(7453),
                            Email = "Aditya5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Betty",
                            IsArchived = false,
                            LastName = "Turcotte",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 9, 25, 48, 645, DateTimeKind.Utc).AddTicks(7210),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10039L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "2bd0f43d-6a1c-4901-a0f5-78528c6610fb",
                            CreatedDateTime = new DateTime(2024, 9, 16, 6, 50, 4, 268, DateTimeKind.Utc).AddTicks(8053),
                            Email = "Eulalia18@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Sydney",
                            IsArchived = false,
                            LastName = "Boyer",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 14, 18, 44, 427, DateTimeKind.Utc).AddTicks(6499),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10040L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "95244a94-6b5a-4b62-9b6d-9871b335f77f",
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 10, 22, 865, DateTimeKind.Utc).AddTicks(4878),
                            Email = "Hassie.Renner@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Darren",
                            IsArchived = false,
                            LastName = "Boyer",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 11, 17, 28, 272, DateTimeKind.Utc).AddTicks(2786),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10041L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "92e28cd6-a000-4a99-bf2a-b84732cd670c",
                            CreatedDateTime = new DateTime(2024, 9, 16, 19, 58, 26, 970, DateTimeKind.Utc).AddTicks(208),
                            Email = "Savanna9@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Talia",
                            IsArchived = false,
                            LastName = "O'Conner",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 9, 20, 58, 495, DateTimeKind.Utc).AddTicks(9522),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10042L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "3ca9b782-e8c0-448b-9a4d-d3c986a51ccc",
                            CreatedDateTime = new DateTime(2024, 9, 16, 20, 51, 44, 623, DateTimeKind.Utc).AddTicks(4536),
                            Email = "Stephania.Trantow54@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Domenic",
                            IsArchived = false,
                            LastName = "Oberbrunner",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 12, 35, 30, 760, DateTimeKind.Utc).AddTicks(5134),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10043L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "390c1258-ef27-4d60-8b31-673a874ce9e5",
                            CreatedDateTime = new DateTime(2024, 9, 16, 3, 17, 4, 510, DateTimeKind.Utc).AddTicks(9802),
                            Email = "Genesis67@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Earl",
                            IsArchived = false,
                            LastName = "Romaguera",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 4, 14, 24, 892, DateTimeKind.Utc).AddTicks(6834),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10044L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "26896dc5-6a3c-49b7-9446-80f8ec94a7cb",
                            CreatedDateTime = new DateTime(2024, 9, 16, 17, 15, 26, 722, DateTimeKind.Utc).AddTicks(8172),
                            Email = "Brent.Frami87@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Cortney",
                            IsArchived = false,
                            LastName = "Emard",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 17, 38, 56, 352, DateTimeKind.Utc).AddTicks(6725),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10045L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "a7d1cf58-1005-4bdd-9a97-467fe4d529db",
                            CreatedDateTime = new DateTime(2024, 9, 16, 7, 19, 36, 542, DateTimeKind.Utc).AddTicks(664),
                            Email = "Quincy_Satterfield@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nickolas",
                            IsArchived = false,
                            LastName = "Doyle",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 0, 38, 54, 140, DateTimeKind.Utc).AddTicks(2157),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10046L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "9e6560e5-54cb-4a74-bb36-a6c74ce54a09",
                            CreatedDateTime = new DateTime(2024, 9, 16, 13, 52, 4, 997, DateTimeKind.Utc).AddTicks(4155),
                            Email = "Amiya.Shields@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Jorge",
                            IsArchived = false,
                            LastName = "Bechtelar",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 8, 43, 4, 345, DateTimeKind.Utc).AddTicks(9307),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10047L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "243339ed-87a9-473b-b5ea-ce2d20b26b6c",
                            CreatedDateTime = new DateTime(2024, 9, 16, 7, 44, 57, 809, DateTimeKind.Utc).AddTicks(8257),
                            Email = "Pansy_Marquardt64@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Zena",
                            IsArchived = false,
                            LastName = "Ward",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 22, 28, 9, 151, DateTimeKind.Utc).AddTicks(1897),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10048L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "4c89abeb-ade0-422b-b4ca-dc622765d9f2",
                            CreatedDateTime = new DateTime(2024, 9, 16, 11, 11, 46, 774, DateTimeKind.Utc).AddTicks(3166),
                            Email = "Cortez_Medhurst17@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Miles",
                            IsArchived = false,
                            LastName = "Cremin",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 10, 39, 21, 147, DateTimeKind.Utc).AddTicks(8143),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10049L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "6eb22d1e-e190-48e2-9f37-63c2c0d7dc82",
                            CreatedDateTime = new DateTime(2024, 9, 16, 15, 17, 12, 503, DateTimeKind.Utc).AddTicks(5880),
                            Email = "Keyshawn41@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gavin",
                            IsArchived = false,
                            LastName = "Witting",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 20, 1, 5, 89, DateTimeKind.Utc).AddTicks(1426),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10050L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "1882df0b-6668-4071-9b1a-5a436824dda9",
                            CreatedDateTime = new DateTime(2024, 9, 16, 2, 50, 10, 504, DateTimeKind.Utc).AddTicks(2427),
                            Email = "Francesca23@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Romaine",
                            IsArchived = false,
                            LastName = "Raynor",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 5, 38, 43, 423, DateTimeKind.Utc).AddTicks(6855),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10051L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "0dd83570-0a84-4e2d-ad0c-5e59f4bbf736",
                            CreatedDateTime = new DateTime(2024, 9, 16, 15, 35, 2, 669, DateTimeKind.Utc).AddTicks(9544),
                            Email = "Sylvester_Armstrong23@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maxie",
                            IsArchived = false,
                            LastName = "VonRueden",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 15, 49, 19, 920, DateTimeKind.Utc).AddTicks(1033),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10052L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "4ff707e7-a743-4a33-a9be-f865a86dea12",
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 58, 24, 175, DateTimeKind.Utc).AddTicks(4151),
                            Email = "Fae.Collins21@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martine",
                            IsArchived = false,
                            LastName = "Feeney",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 0, 49, 32, 699, DateTimeKind.Utc).AddTicks(8965),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10053L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "82f7f3f3-754e-4942-bd58-22d043ef1fcf",
                            CreatedDateTime = new DateTime(2024, 9, 16, 23, 47, 39, 123, DateTimeKind.Utc).AddTicks(9873),
                            Email = "Lorenza_DuBuque58@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Evans",
                            IsArchived = false,
                            LastName = "Harris",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 17, 8, 20, 25, DateTimeKind.Utc).AddTicks(8490),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10054L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "bdf9efa5-0b1a-4481-9d90-e6ace49fdf49",
                            CreatedDateTime = new DateTime(2024, 9, 16, 7, 31, 20, 25, DateTimeKind.Utc).AddTicks(3256),
                            Email = "Camille.Weissnat@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Darron",
                            IsArchived = false,
                            LastName = "Deckow",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 22, 33, 7, 990, DateTimeKind.Utc).AddTicks(38),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10055L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "0bac7dd9-9404-4d08-9cbf-03a7471153ea",
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 49, 32, 761, DateTimeKind.Utc).AddTicks(3751),
                            Email = "Kaitlin49@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Geoffrey",
                            IsArchived = false,
                            LastName = "Feeney",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 23, 9, 31, 480, DateTimeKind.Utc).AddTicks(1573),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10056L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "1620711d-caa8-4d2b-bfdd-e06af1caf9f9",
                            CreatedDateTime = new DateTime(2024, 9, 16, 17, 19, 0, 552, DateTimeKind.Utc).AddTicks(7035),
                            Email = "Emie38@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jaqueline",
                            IsArchived = false,
                            LastName = "Ziemann",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 21, 10, 20, 94, DateTimeKind.Utc).AddTicks(432),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10057L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "18939c58-cce6-4f1b-b3ed-7aed61fe4003",
                            CreatedDateTime = new DateTime(2024, 9, 16, 13, 7, 2, 298, DateTimeKind.Utc).AddTicks(7977),
                            Email = "Esta.Wunsch@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Winnifred",
                            IsArchived = false,
                            LastName = "Ziemann",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 19, 40, 39, 671, DateTimeKind.Utc).AddTicks(88),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10058L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "19262eaf-96a6-4070-acc0-1fa208ad4e64",
                            CreatedDateTime = new DateTime(2024, 9, 16, 3, 47, 44, 197, DateTimeKind.Utc).AddTicks(13),
                            Email = "Trinity7@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Avis",
                            IsArchived = false,
                            LastName = "O'Reilly",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 12, 37, 20, 212, DateTimeKind.Utc).AddTicks(5514),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10059L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "2f03d639-e14d-4193-8a01-9f44500eb1c6",
                            CreatedDateTime = new DateTime(2024, 9, 16, 1, 30, 59, 652, DateTimeKind.Utc).AddTicks(7692),
                            Email = "Meggie_Wiza@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Vernon",
                            IsArchived = false,
                            LastName = "King",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 19, 41, 15, 976, DateTimeKind.Utc).AddTicks(7956),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10060L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "314672c7-3195-451c-9ef3-3a876cb0a8a5",
                            CreatedDateTime = new DateTime(2024, 9, 16, 18, 52, 45, 400, DateTimeKind.Utc).AddTicks(5936),
                            Email = "Tania.Marks@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jeramy",
                            IsArchived = false,
                            LastName = "Luettgen",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 1, 14, 7, 299, DateTimeKind.Utc).AddTicks(9882),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10061L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "7b93230b-27ac-4f9d-bdf0-160da994de76",
                            CreatedDateTime = new DateTime(2024, 9, 16, 14, 11, 12, 769, DateTimeKind.Utc).AddTicks(7058),
                            Email = "Ozella_Klein@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Clyde",
                            IsArchived = false,
                            LastName = "Jenkins",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 1, 18, 16, 850, DateTimeKind.Utc).AddTicks(2784),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10062L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "b5658d22-d80b-43fb-b25e-0e3a13674f96",
                            CreatedDateTime = new DateTime(2024, 9, 16, 6, 55, 24, 934, DateTimeKind.Utc).AddTicks(9416),
                            Email = "Carmine.Schneider30@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Florine",
                            IsArchived = false,
                            LastName = "Hegmann",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 21, 4, 43, 740, DateTimeKind.Utc).AddTicks(8800),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10063L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "7fb0dbd4-be32-47b9-8242-4a2909f659a0",
                            CreatedDateTime = new DateTime(2024, 9, 16, 16, 35, 51, 699, DateTimeKind.Utc).AddTicks(7939),
                            Email = "Doris13@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gabe",
                            IsArchived = false,
                            LastName = "Keebler",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 9, 55, 9, 336, DateTimeKind.Utc).AddTicks(4061),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10064L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "402c331e-4611-4907-8db0-39608373a182",
                            CreatedDateTime = new DateTime(2024, 9, 16, 13, 29, 23, 820, DateTimeKind.Utc).AddTicks(5044),
                            Email = "Skye.Will25@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Grayce",
                            IsArchived = false,
                            LastName = "Bauch",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 10, 41, 50, 614, DateTimeKind.Utc).AddTicks(5985),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10065L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "c3cb2cc2-2f24-4b89-bfdf-580b064b0303",
                            CreatedDateTime = new DateTime(2024, 9, 16, 7, 10, 0, 825, DateTimeKind.Utc).AddTicks(359),
                            Email = "Shyann10@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Malcolm",
                            IsArchived = false,
                            LastName = "Altenwerth",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 20, 36, 26, 36, DateTimeKind.Utc).AddTicks(9660),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10066L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "2943631b-a592-480e-9216-e6a4f44e71b5",
                            CreatedDateTime = new DateTime(2024, 9, 16, 12, 50, 49, 782, DateTimeKind.Utc).AddTicks(8115),
                            Email = "Reyna51@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Rosetta",
                            IsArchived = false,
                            LastName = "Hettinger",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 3, 57, 5, 695, DateTimeKind.Utc).AddTicks(7046),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10067L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "4f4f56ee-1a45-41d7-a130-3004abcf3784",
                            CreatedDateTime = new DateTime(2024, 9, 16, 20, 24, 52, 620, DateTimeKind.Utc).AddTicks(5804),
                            Email = "Flossie.Robel@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Roselyn",
                            IsArchived = false,
                            LastName = "Boehm",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 22, 35, 21, 823, DateTimeKind.Utc).AddTicks(590),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10068L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "8c429e31-176c-47c4-9eb5-186ed2f137ca",
                            CreatedDateTime = new DateTime(2024, 9, 16, 20, 42, 5, 646, DateTimeKind.Utc).AddTicks(423),
                            Email = "Dorian.Mante@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Germaine",
                            IsArchived = false,
                            LastName = "Spinka",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 23, 7, 39, 131, DateTimeKind.Utc).AddTicks(5665),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10069L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "56de8ea5-f1b0-4e8d-bec0-3135ff209ade",
                            CreatedDateTime = new DateTime(2024, 9, 16, 11, 47, 53, 400, DateTimeKind.Utc).AddTicks(2105),
                            Email = "Lennie_Kilback@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Annabelle",
                            IsArchived = false,
                            LastName = "Yost",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 4, 19, 47, 168, DateTimeKind.Utc).AddTicks(9636),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10070L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "162643b4-14fa-43de-ba5b-4c3794c87805",
                            CreatedDateTime = new DateTime(2024, 9, 16, 13, 59, 0, 281, DateTimeKind.Utc).AddTicks(9924),
                            Email = "Krystal_Mitchell@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Lonzo",
                            IsArchived = false,
                            LastName = "Corkery",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 4, 15, 22, 908, DateTimeKind.Utc).AddTicks(3236),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10071L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "b279f580-fd07-4227-bbd3-9066e21541f5",
                            CreatedDateTime = new DateTime(2024, 9, 16, 12, 20, 14, 292, DateTimeKind.Utc).AddTicks(3306),
                            Email = "Sandy90@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Dante",
                            IsArchived = false,
                            LastName = "Gerlach",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 17, 57, 25, 348, DateTimeKind.Utc).AddTicks(5282),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10072L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "71fc1ca0-9e4b-44d3-83a6-844754454662",
                            CreatedDateTime = new DateTime(2024, 9, 16, 14, 4, 40, 765, DateTimeKind.Utc).AddTicks(6904),
                            Email = "Darion56@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jerel",
                            IsArchived = false,
                            LastName = "Volkman",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 14, 22, 49, 112, DateTimeKind.Utc).AddTicks(8356),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10073L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "ade455ef-39d0-42ea-b548-e405e83d2745",
                            CreatedDateTime = new DateTime(2024, 9, 16, 23, 46, 9, 975, DateTimeKind.Utc).AddTicks(8688),
                            Email = "Kristofer_Harber@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Miracle",
                            IsArchived = false,
                            LastName = "Osinski",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 10, 41, 9, 614, DateTimeKind.Utc).AddTicks(5044),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10074L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "ca8e547a-94da-4419-a11b-802717a77580",
                            CreatedDateTime = new DateTime(2024, 9, 16, 13, 26, 47, 458, DateTimeKind.Utc).AddTicks(546),
                            Email = "Holly.Haley55@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Violet",
                            IsArchived = false,
                            LastName = "Goldner",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 6, 21, 15, 133, DateTimeKind.Utc).AddTicks(6872),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10075L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "203a70b5-931b-4522-87ef-b1ba40687bff",
                            CreatedDateTime = new DateTime(2024, 9, 16, 23, 48, 54, 514, DateTimeKind.Utc).AddTicks(7562),
                            Email = "Deshawn_Pfannerstill@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Carleton",
                            IsArchived = false,
                            LastName = "Kshlerin",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 12, 59, 41, 408, DateTimeKind.Utc).AddTicks(5809),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10076L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "ff1c812e-87dd-49c2-a65e-89f03024a3fc",
                            CreatedDateTime = new DateTime(2024, 9, 16, 17, 48, 29, 683, DateTimeKind.Utc).AddTicks(3025),
                            Email = "Agnes_Morissette@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kaleb",
                            IsArchived = false,
                            LastName = "Zieme",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 19, 29, 28, 70, DateTimeKind.Utc).AddTicks(3199),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10077L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "d70ec1dd-4422-4c1f-abc1-473f51f741a5",
                            CreatedDateTime = new DateTime(2024, 9, 16, 23, 30, 19, 399, DateTimeKind.Utc).AddTicks(5903),
                            Email = "Tommie_Schmitt91@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Magali",
                            IsArchived = false,
                            LastName = "Ziemann",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 11, 8, 13, 138, DateTimeKind.Utc).AddTicks(7691),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10078L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "81f391b9-93be-43e8-8392-af66e2461053",
                            CreatedDateTime = new DateTime(2024, 9, 16, 20, 58, 1, 552, DateTimeKind.Utc).AddTicks(4383),
                            Email = "Malvina.Huel@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Lue",
                            IsArchived = false,
                            LastName = "Franecki",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 10, 14, 34, 777, DateTimeKind.Utc).AddTicks(1144),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10079L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "40beaa27-9124-41cd-857f-46e67f007e14",
                            CreatedDateTime = new DateTime(2024, 9, 16, 20, 44, 31, 855, DateTimeKind.Utc).AddTicks(7305),
                            Email = "Autumn.Reilly@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maximillia",
                            IsArchived = false,
                            LastName = "Hills",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 23, 31, 48, 75, DateTimeKind.Utc).AddTicks(4084),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10080L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "45465d1f-9e45-406c-8948-52c33433cff8",
                            CreatedDateTime = new DateTime(2024, 9, 16, 3, 57, 25, 310, DateTimeKind.Utc).AddTicks(8822),
                            Email = "Demond_Dach@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jacinthe",
                            IsArchived = false,
                            LastName = "Schmidt",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 2, 32, 50, 44, DateTimeKind.Utc).AddTicks(7454),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10081L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "015cde28-4b72-4fc2-8769-8170bb1045c8",
                            CreatedDateTime = new DateTime(2024, 9, 16, 22, 45, 50, 657, DateTimeKind.Utc).AddTicks(5412),
                            Email = "Xander76@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Felicity",
                            IsArchived = false,
                            LastName = "Fadel",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 7, 42, 17, 732, DateTimeKind.Utc).AddTicks(7006),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10082L,
                            AccessFailedCount = 0,
                            CompanyId = 10001L,
                            ConcurrencyStamp = "16f5dc5a-11a8-42ea-bad7-56da4430271b",
                            CreatedDateTime = new DateTime(2024, 9, 16, 14, 30, 42, 246, DateTimeKind.Utc).AddTicks(8752),
                            Email = "Brenden.Morar@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Roberto",
                            IsArchived = false,
                            LastName = "Block",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 20, 5, 2, 999, DateTimeKind.Utc).AddTicks(5106),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10083L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "8ac20db9-43a1-4d06-b07e-2ecbb0328ec1",
                            CreatedDateTime = new DateTime(2024, 9, 16, 3, 37, 20, 104, DateTimeKind.Utc).AddTicks(375),
                            Email = "Sammy_Abbott@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mireille",
                            IsArchived = false,
                            LastName = "Kunde",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 5, 8, 12, 402, DateTimeKind.Utc).AddTicks(6503),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10084L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "2899de0e-f6bd-4862-a4c1-a93b1b2cadf3",
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 16, 48, 188, DateTimeKind.Utc).AddTicks(8382),
                            Email = "Hayley70@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adriel",
                            IsArchived = false,
                            LastName = "Daniel",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 6, 15, 24, 30, DateTimeKind.Utc).AddTicks(8393),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10085L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "a0c70621-8748-46f9-9ce1-25444f26715a",
                            CreatedDateTime = new DateTime(2024, 9, 16, 4, 32, 19, 385, DateTimeKind.Utc).AddTicks(3675),
                            Email = "Eric21@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Shyann",
                            IsArchived = false,
                            LastName = "Nienow",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 16, 44, 22, 635, DateTimeKind.Utc).AddTicks(9815),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10086L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "d6a2c710-15a6-4b6e-8534-5ede3f429a01",
                            CreatedDateTime = new DateTime(2024, 9, 16, 12, 57, 51, 155, DateTimeKind.Utc).AddTicks(1264),
                            Email = "Hallie.Osinski61@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Woodrow",
                            IsArchived = false,
                            LastName = "Hessel",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 22, 45, 35, 343, DateTimeKind.Utc).AddTicks(1883),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10087L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "9f2c9b4e-aef8-4a61-bd39-d6e14612dba3",
                            CreatedDateTime = new DateTime(2024, 9, 16, 7, 55, 20, 370, DateTimeKind.Utc).AddTicks(9740),
                            Email = "Dina33@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Stanton",
                            IsArchived = false,
                            LastName = "Little",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 18, 4, 14, 282, DateTimeKind.Utc).AddTicks(7068),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10088L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "18410c26-7eb6-4f66-a7ec-517349d61728",
                            CreatedDateTime = new DateTime(2024, 9, 16, 6, 11, 48, 335, DateTimeKind.Utc).AddTicks(3075),
                            Email = "Madilyn_Borer40@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Sharon",
                            IsArchived = false,
                            LastName = "Heathcote",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 21, 48, 2, 641, DateTimeKind.Utc).AddTicks(8264),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10089L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "784a9e24-0e3d-49b7-91f8-9067a59ecb4a",
                            CreatedDateTime = new DateTime(2024, 9, 16, 21, 47, 51, 339, DateTimeKind.Utc).AddTicks(2964),
                            Email = "Alisa_Kunze@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Kendall",
                            IsArchived = false,
                            LastName = "Stracke",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 23, 8, 31, 371, DateTimeKind.Utc).AddTicks(4250),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10090L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "b1a6b15e-b226-4a71-9e29-60af07cc4613",
                            CreatedDateTime = new DateTime(2024, 9, 16, 2, 38, 16, 568, DateTimeKind.Utc).AddTicks(5935),
                            Email = "Marshall5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Madisen",
                            IsArchived = false,
                            LastName = "Bergstrom",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 0, 5, 38, 48, DateTimeKind.Utc).AddTicks(9236),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10091L,
                            AccessFailedCount = 0,
                            CompanyId = 10000L,
                            ConcurrencyStamp = "2f1af586-b1ea-49fc-9921-f7512f092dca",
                            CreatedDateTime = new DateTime(2024, 9, 16, 18, 47, 40, 415, DateTimeKind.Utc).AddTicks(8847),
                            Email = "Amya_Block58@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Thurman",
                            IsArchived = false,
                            LastName = "Flatley",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 21, 21, 35, 721, DateTimeKind.Utc).AddTicks(9019),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10092L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "0f4f87cc-3d75-484e-9e45-dd906739b36f",
                            CreatedDateTime = new DateTime(2024, 9, 16, 15, 47, 42, 15, DateTimeKind.Utc).AddTicks(7556),
                            Email = "Vicente.Cummerata30@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Lia",
                            IsArchived = false,
                            LastName = "McKenzie",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 7, 29, 27, 528, DateTimeKind.Utc).AddTicks(1225),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10093L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "6ef15ad7-dfb7-42eb-8e3e-17184d8d7ba4",
                            CreatedDateTime = new DateTime(2024, 9, 16, 4, 15, 17, 232, DateTimeKind.Utc).AddTicks(711),
                            Email = "Rosina_Feil64@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stuart",
                            IsArchived = false,
                            LastName = "Romaguera",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 12, 45, 45, 790, DateTimeKind.Utc).AddTicks(2356),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10094L,
                            AccessFailedCount = 0,
                            CompanyId = 10004L,
                            ConcurrencyStamp = "a52bd1d3-73b8-48a2-ae15-9523183e1f24",
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 55, 43, 925, DateTimeKind.Utc).AddTicks(6067),
                            Email = "Katherine_Kulas67@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Casimer",
                            IsArchived = false,
                            LastName = "Nikolaus",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 2, 50, 5, 739, DateTimeKind.Utc).AddTicks(9033),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10095L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "f17afea7-c797-487c-a5da-9e5c3d90d01e",
                            CreatedDateTime = new DateTime(2024, 9, 16, 13, 2, 12, 845, DateTimeKind.Utc).AddTicks(5630),
                            Email = "Jasen25@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Rita",
                            IsArchived = false,
                            LastName = "Herman",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 16, 45, 25, 249, DateTimeKind.Utc).AddTicks(1304),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10096L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "9943341c-7542-45f0-aedb-888536fa69e7",
                            CreatedDateTime = new DateTime(2024, 9, 16, 17, 14, 9, 916, DateTimeKind.Utc).AddTicks(8700),
                            Email = "Kelsie70@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Pamela",
                            IsArchived = false,
                            LastName = "Price",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 15, 42, 19, 437, DateTimeKind.Utc).AddTicks(6841),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10097L,
                            AccessFailedCount = 0,
                            CompanyId = 10003L,
                            ConcurrencyStamp = "64e6eced-9ffc-400e-a08c-71782684a433",
                            CreatedDateTime = new DateTime(2024, 9, 16, 1, 17, 4, 837, DateTimeKind.Utc).AddTicks(2561),
                            Email = "Kayleigh_Witting34@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Domenic",
                            IsArchived = false,
                            LastName = "Romaguera",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 13, 39, 21, 878, DateTimeKind.Utc).AddTicks(1440),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10098L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "a6c11e98-b715-46bb-b473-0aa8173e5d62",
                            CreatedDateTime = new DateTime(2024, 9, 16, 14, 26, 19, 308, DateTimeKind.Utc).AddTicks(4515),
                            Email = "Mayra75@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Dayne",
                            IsArchived = false,
                            LastName = "Smitham",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 22, 7, 17, 823, DateTimeKind.Utc).AddTicks(2192),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10099L,
                            AccessFailedCount = 0,
                            CompanyId = 10002L,
                            ConcurrencyStamp = "b5751445-53c0-4996-8ee7-7629b2598d7f",
                            CreatedDateTime = new DateTime(2024, 9, 16, 3, 38, 59, 951, DateTimeKind.Utc).AddTicks(2506),
                            Email = "Cassie_Bosco@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Lurline",
                            IsArchived = false,
                            LastName = "Rempel",
                            LockoutEnabled = false,
                            ModifiedDateTime = new DateTime(2024, 9, 16, 2, 26, 3, 657, DateTimeKind.Utc).AddTicks(2632),
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CompanyId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.HasKey("CompanyId")
                        .HasName("pk_company");

                    b.ToTable("company", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyId = 10000L,
                            CreatedDateTime = new DateTime(2024, 9, 16, 3, 13, 5, 953, DateTimeKind.Utc).AddTicks(8354),
                            IsArchived = false,
                            Name = "Kenna O'Keefe"
                        },
                        new
                        {
                            CompanyId = 10001L,
                            CreatedDateTime = new DateTime(2024, 9, 16, 17, 52, 42, 678, DateTimeKind.Utc).AddTicks(9462),
                            IsArchived = false,
                            Name = "Ned Steuber"
                        },
                        new
                        {
                            CompanyId = 10002L,
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 39, 49, 887, DateTimeKind.Utc).AddTicks(5517),
                            IsArchived = false,
                            Name = "Erika Dare"
                        },
                        new
                        {
                            CompanyId = 10003L,
                            CreatedDateTime = new DateTime(2024, 9, 16, 10, 6, 31, 782, DateTimeKind.Utc).AddTicks(4144),
                            IsArchived = false,
                            Name = "Cleta Mante"
                        },
                        new
                        {
                            CompanyId = 10004L,
                            CreatedDateTime = new DateTime(2024, 9, 16, 8, 23, 47, 438, DateTimeKind.Utc).AddTicks(7417),
                            IsArchived = false,
                            Name = "Reynold Emmerich"
                        });
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.CompanyPermission", b =>
                {
                    b.Property<Guid>("CompanyPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("companypermissionid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer")
                        .HasColumnName("permissiontype");

                    b.HasKey("CompanyPermissionId")
                        .HasName("pk_companypermission");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_companypermission_companyid");

                    b.ToTable("companypermission", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("inventoryid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirationdate");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddatetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RackId")
                        .HasColumnType("uuid")
                        .HasColumnName("rackid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<int>("XSlot")
                        .HasColumnType("integer")
                        .HasColumnName("xslot");

                    b.Property<int>("YSlot")
                        .HasColumnType("integer")
                        .HasColumnName("yslot");

                    b.HasKey("InventoryId")
                        .HasName("pk_inventory");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_inventory_productid");

                    b.HasIndex("RackId")
                        .HasDatabaseName("ix_inventory_rackid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_inventory_userid");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("locationid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<int>("LocationType")
                        .HasColumnType("integer")
                        .HasColumnName("locationtype");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.HasKey("LocationId")
                        .HasName("pk_location");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_location_companyid");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("notificationid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("notificationtype");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("NotificationId")
                        .HasName("pk_notification");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notification_userid");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PermissionType", b =>
                {
                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("permissiontypeid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("PermissionTypeId")
                        .HasName("pk_permissiontype");

                    b.ToTable("permissiontype", (string)null);

                    b.HasData(
                        new
                        {
                            PermissionTypeId = 4,
                            Name = "Order"
                        },
                        new
                        {
                            PermissionTypeId = 13,
                            Name = "Inbound"
                        },
                        new
                        {
                            PermissionTypeId = 20,
                            Name = "Putaway"
                        },
                        new
                        {
                            PermissionTypeId = 30,
                            Name = "Quality"
                        },
                        new
                        {
                            PermissionTypeId = 40,
                            Name = "Outbound"
                        },
                        new
                        {
                            PermissionTypeId = 50,
                            Name = "Picking"
                        },
                        new
                        {
                            PermissionTypeId = 60,
                            Name = "Packing"
                        },
                        new
                        {
                            PermissionTypeId = 70,
                            Name = "Shipping"
                        },
                        new
                        {
                            PermissionTypeId = 80,
                            Name = "Product"
                        },
                        new
                        {
                            PermissionTypeId = 90,
                            Name = "Stock"
                        },
                        new
                        {
                            PermissionTypeId = 95,
                            Name = "Location"
                        },
                        new
                        {
                            PermissionTypeId = 100,
                            Name = "PurchaseOrder"
                        },
                        new
                        {
                            PermissionTypeId = 110,
                            Name = "PurchaseRequest"
                        },
                        new
                        {
                            PermissionTypeId = 120,
                            Name = "Supplier"
                        },
                        new
                        {
                            PermissionTypeId = 130,
                            Name = "ReportOrder"
                        },
                        new
                        {
                            PermissionTypeId = 140,
                            Name = "ReportPurchaseOrder"
                        },
                        new
                        {
                            PermissionTypeId = 150,
                            Name = "ReportInventory"
                        },
                        new
                        {
                            PermissionTypeId = 170,
                            Name = "ManageCompany"
                        },
                        new
                        {
                            PermissionTypeId = 180,
                            Name = "ManageTeam"
                        });
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("productid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode");

                    b.Property<string>("Barcode1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode1");

                    b.Property<string>("Barcode2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode2");

                    b.Property<string>("Barcode3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("barcode3");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("real")
                        .HasColumnName("purchaseprice");

                    b.Property<float>("RetailPrice")
                        .HasColumnType("real")
                        .HasColumnName("retailprice");

                    b.Property<string>("SKU")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sku");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.Property<float>("TaxRate")
                        .HasColumnType("real")
                        .HasColumnName("taxrate");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<double?>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width");

                    b.HasKey("ProductId")
                        .HasName("pk_product");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_product_supplierid");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("purchaseorderid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expecteddate");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("locationid");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddatetime");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("note");

                    b.Property<int>("POStatus")
                        .HasColumnType("integer")
                        .HasColumnName("postatus");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purchaseordernumber");

                    b.Property<float>("Shipping")
                        .HasColumnType("real")
                        .HasColumnName("shipping");

                    b.Property<string>("ShippingCarrier")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shippingcarrier");

                    b.Property<float>("Subtotal")
                        .HasColumnType("real")
                        .HasColumnName("subtotal");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid");

                    b.Property<float>("Tax")
                        .HasColumnType("real")
                        .HasColumnName("tax");

                    b.Property<float>("Total")
                        .HasColumnType("real")
                        .HasColumnName("total");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("trackingnumber");

                    b.Property<int>("UnitOrders")
                        .HasColumnType("integer")
                        .HasColumnName("unitorders");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("PurchaseOrderId")
                        .HasName("pk_purchaseorder");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_purchaseorder_locationid");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_purchaseorder_supplierid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_purchaseorder_userid");

                    b.ToTable("purchaseorder", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("PurchaseOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("purchaseorderitemid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchaseorderid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("PurchaseOrderItemId")
                        .HasName("pk_purchaseorderitem");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_purchaseorderitem_productid");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_purchaseorderitem_purchaseorderid");

                    b.ToTable("purchaseorderitem", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseRequest", b =>
                {
                    b.Property<Guid>("PurchaseRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("purchaserequestid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("MessageFromTeam")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("messagefromteam");

                    b.Property<string>("MessageToTeam")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("messagetoteam");

                    b.Property<int>("Staus")
                        .HasColumnType("integer")
                        .HasColumnName("staus");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("teamid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("PurchaseRequestId")
                        .HasName("pk_purchaserequest");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_purchaserequest_teamid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_purchaserequest_userid");

                    b.ToTable("purchaserequest", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Rack", b =>
                {
                    b.Property<Guid>("RackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("rackid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<Guid>("LoactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("loactionid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("locationid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("XSlotMax")
                        .HasColumnType("integer")
                        .HasColumnName("xslotmax");

                    b.Property<int>("YSlotMax")
                        .HasColumnType("integer")
                        .HasColumnName("yslotmax");

                    b.HasKey("RackId")
                        .HasName("pk_rack");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_rack_locationid");

                    b.ToTable("rack", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("supplierid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.HasKey("SupplierId")
                        .HasName("pk_supplier");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_supplier_companyid");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("teamid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("TeamId")
                        .HasName("pk_team");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_team_companyid");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.TeamUser", b =>
                {
                    b.Property<Guid>("TeamUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("teamuserid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("teamid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("TeamUserId")
                        .HasName("pk_teamuser");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_teamuser_teamid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_teamuser_userid");

                    b.ToTable("teamuser", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Tote", b =>
                {
                    b.Property<Guid>("ToteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("toteid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("CountMax")
                        .HasColumnType("integer")
                        .HasColumnName("countmax");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<Guid>("LoactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("loactionid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("locationid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("ToteId")
                        .HasName("pk_tote");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_tote_locationid");

                    b.ToTable("tote", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.UserPermission", b =>
                {
                    b.Property<Guid>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userpermissionid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsCrud")
                        .HasColumnType("boolean")
                        .HasColumnName("iscrud");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer")
                        .HasColumnName("permissiontype");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("UserPermissionId")
                        .HasName("pk_userpermission");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userpermission_userid");

                    b.ToTable("userpermission", (string)null);
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.UserPreference", b =>
                {
                    b.Property<Guid>("UserPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userpreferenceid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("PreferenceType")
                        .HasColumnType("integer")
                        .HasColumnName("preferencetype");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("UserPreferenceId")
                        .HasName("pk_userpreference");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userpreference_userid");

                    b.ToTable("userpreference", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid");

                    b.HasOne("WMS_backend.Models.DBModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_userid");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.AppUser", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_aspnetusers_company_companyid");

                    b.HasOne("WMS_backend.Models.DBModels.AppUser", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId")
                        .HasConstraintName("fk_aspnetusers_aspnetusers_modifieduserid");

                    b.Navigation("Company");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.CompanyPermission", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("CompanyPermissions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_companypermission_company_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Inventory", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_product_productid");

                    b.HasOne("WMS_backend.Models.DBModels.Rack", "Rack")
                        .WithMany("Inventories")
                        .HasForeignKey("RackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_rack_rackid");

                    b.HasOne("WMS_backend.Models.DBModels.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_inventory_users_userid");

                    b.Navigation("Product");

                    b.Navigation("Rack");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Location", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_company_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Notification", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.AppUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Product", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_product_supplier_supplierid");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrder", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Location", "Location")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorder_location_locationid");

                    b.HasOne("WMS_backend.Models.DBModels.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorder_supplier_supplierid");

                    b.HasOne("WMS_backend.Models.DBModels.AppUser", "User")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorder_users_userid");

                    b.Navigation("Location");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrderItem", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorderitem_product_productid");

                    b.HasOne("WMS_backend.Models.DBModels.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaseorderitem_purchaseorder_purchaseorderid");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseRequest", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Team", "Team")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaserequest_team_teamid");

                    b.HasOne("WMS_backend.Models.DBModels.AppUser", "User")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchaserequest_users_userid");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Rack", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Location", "Location")
                        .WithMany("Racks")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rack_location_locationid");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Supplier", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("Suppliers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_supplier_company_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Team", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Company", "Company")
                        .WithMany("Teams")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_company_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.TeamUser", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teamuser_team_teamid");

                    b.HasOne("WMS_backend.Models.DBModels.AppUser", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teamuser_users_userid");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Tote", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.Location", "Location")
                        .WithMany("Totes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tote_location_locationid");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.UserPermission", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.AppUser", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpermission_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.UserPreference", b =>
                {
                    b.HasOne("WMS_backend.Models.DBModels.AppUser", "User")
                        .WithMany("UserPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpreference_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.AppUser", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseRequests");

                    b.Navigation("TeamUsers");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Company", b =>
                {
                    b.Navigation("CompanyPermissions");

                    b.Navigation("Locations");

                    b.Navigation("Suppliers");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Location", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("Racks");

                    b.Navigation("Totes");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Rack", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Supplier", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("WMS_backend.Models.DBModels.Team", b =>
                {
                    b.Navigation("PurchaseRequests");

                    b.Navigation("TeamUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
