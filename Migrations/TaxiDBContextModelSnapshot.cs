// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Taxi_Backend.Data;

#nullable disable

namespace Taxi_Backend.Migrations
{
    [DbContext(typeof(TaxiDBContext))]
    partial class TaxiDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claimvalue");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetroleclaims_roleid");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("claimvalue");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserclaims_userid");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("providerdisplayname");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserlogins_userid");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetuserroles_roleid");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Taxi_Backend.Models.BackgroundHistory", b =>
                {
                    b.Property<long>("BackgroundHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("backgroundhistoryid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BackgroundHistoryId"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<int>("CustomerQueueCount")
                        .HasColumnType("integer")
                        .HasColumnName("customerqueuecount");

                    b.Property<int>("DriverQueueCount")
                        .HasColumnType("integer")
                        .HasColumnName("driverqueuecount");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("error");

                    b.Property<int>("ErrorAmount")
                        .HasColumnType("integer")
                        .HasColumnName("erroramount");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean")
                        .HasColumnName("issuccess");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("process");

                    b.Property<int>("SuccessAmount")
                        .HasColumnType("integer")
                        .HasColumnName("successamount");

                    b.HasKey("BackgroundHistoryId")
                        .HasName("pk_backgroundhistory");

                    b.ToTable("backgroundhistory", (string)null);
                });

            modelBuilder.Entity("Taxi_Backend.Models.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("customerid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CustomerId"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phonenumber");

                    b.HasKey("CustomerId")
                        .HasName("pk_customer");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_customer_phonenumber")
                        .HasFilter("PhoneNumber is not null");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("Taxi_Backend.Models.CustomerQueue", b =>
                {
                    b.Property<long>("CustomerQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("customerqueueid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CustomerQueueId"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerid");

                    b.Property<int>("QueueStatus")
                        .HasColumnType("integer")
                        .HasColumnName("queuestatus");

                    b.Property<long>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("tripid");

                    b.HasKey("CustomerQueueId")
                        .HasName("pk_customerqueue");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_customerqueue_companyid");

                    b.HasIndex("CreatedDateTime")
                        .IsDescending()
                        .HasDatabaseName("ix_customerqueue_createddatetime");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasDatabaseName("ix_customerqueue_customerid")
                        .HasFilter("CustomerId is not null");

                    b.HasIndex("QueueStatus")
                        .HasDatabaseName("ix_customerqueue_queuestatus");

                    b.HasIndex("TripId")
                        .HasDatabaseName("ix_customerqueue_tripid");

                    b.ToTable("customerqueue", (string)null);
                });

            modelBuilder.Entity("Taxi_Backend.Models.DBModels.AppRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "DRIVER"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "COMPANY"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "DISPATCHER"
                        });
                });

            modelBuilder.Entity("Taxi_Backend.Models.DBModels.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("concurrencystamp");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("createduserid");

                    b.Property<int>("DriverNumber")
                        .HasColumnType("integer")
                        .HasColumnName("drivernumber");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastlogindatetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddatetime");

                    b.Property<long?>("ModifiedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("modifieduserid");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_aspnetusers_companyid");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("ix_aspnetusers_createduserid");

                    b.HasIndex("ModifiedUserId")
                        .HasDatabaseName("ix_aspnetusers_modifieduserid");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Taxi_Backend.Models.DBModels.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CompanyId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("isarchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phonenumber");

                    b.Property<int>("TimeZone")
                        .HasColumnType("integer")
                        .HasColumnName("timezone");

                    b.HasKey("CompanyId")
                        .HasName("pk_company");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("Taxi_Backend.Models.DriverQueue", b =>
                {
                    b.Property<long>("DriverQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("driverqueueid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DriverQueueId"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<string>("CustomerQueueId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("customerqueueid");

                    b.Property<int?>("DeclinedCount")
                        .HasColumnType("integer")
                        .HasColumnName("declinedcount");

                    b.Property<DateTime>("DeclinedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("declinedtime");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("driverid");

                    b.Property<double>("Latitude")
                        .HasColumnType("decimal(8,6)")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("longitude");

                    b.Property<int>("QueueStatus")
                        .HasColumnType("integer")
                        .HasColumnName("queuestatus");

                    b.Property<long?>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("tripid");

                    b.HasKey("DriverQueueId")
                        .HasName("pk_driverqueue");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_driverqueue_companyid");

                    b.HasIndex("CreatedDateTime")
                        .IsDescending()
                        .HasDatabaseName("ix_driverqueue_createddatetime");

                    b.HasIndex("DriverId")
                        .IsUnique()
                        .HasDatabaseName("ix_driverqueue_driverid")
                        .HasFilter("DriverId is not null");

                    b.HasIndex("QueueStatus")
                        .HasDatabaseName("ix_driverqueue_queuestatus");

                    b.HasIndex("TripId")
                        .HasDatabaseName("ix_driverqueue_tripid");

                    b.ToTable("driverqueue", (string)null);
                });

            modelBuilder.Entity("Taxi_Backend.Models.Taxi", b =>
                {
                    b.Property<long>("TaxiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("taxiid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TaxiId"));

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("driverid");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("licenseplate");

                    b.Property<int>("Make")
                        .HasColumnType("integer")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("model");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.HasKey("TaxiId")
                        .HasName("pk_taxi");

                    b.HasIndex("DriverId")
                        .IsUnique()
                        .HasDatabaseName("ix_taxi_driverid");

                    b.HasIndex("Size")
                        .HasDatabaseName("ix_taxi_size");

                    b.ToTable("taxi", (string)null);
                });

            modelBuilder.Entity("Taxi_Backend.Models.Trip", b =>
                {
                    b.Property<long>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tripid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TripId"));

                    b.Property<string>("AlcoholPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alcoholphonenumber");

                    b.Property<long?>("AlcoholTripId")
                        .HasColumnType("bigint")
                        .HasColumnName("alcoholtripid");

                    b.Property<int>("CalledTaxiSize")
                        .HasColumnType("integer")
                        .HasColumnName("calledtaxisize");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completedtime");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddatetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerid");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("driverid");

                    b.Property<string>("DroppOffAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("droppoffaddress");

                    b.Property<decimal>("Mileage")
                        .HasColumnType("numeric")
                        .HasColumnName("mileage");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("PickupAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pickupaddress");

                    b.Property<int>("TripStatus")
                        .HasColumnType("integer")
                        .HasColumnName("tripstatus");

                    b.HasKey("TripId")
                        .HasName("pk_trip");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_trip_companyid");

                    b.HasIndex("CompletedTime")
                        .HasDatabaseName("ix_trip_completedtime");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_trip_customerid");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_trip_driverid");

                    b.HasIndex("TripStatus")
                        .HasDatabaseName("ix_trip_tripstatus");

                    b.ToTable("trip", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid");

                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_userid");
                });

            modelBuilder.Entity("Taxi_Backend.Models.CustomerQueue", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.Company", "Company")
                        .WithMany("CustomerQueues")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customerqueue_company_companyid");

                    b.HasOne("Taxi_Backend.Models.Customer", "Customer")
                        .WithMany("CustomerQueues")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customerqueue_customer_customerid");

                    b.HasOne("Taxi_Backend.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customerqueue_trip_tripid");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Taxi_Backend.Models.DBModels.AppUser", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetusers_company_companyid");

                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .HasConstraintName("fk_aspnetusers_aspnetusers_createduserid");

                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId")
                        .HasConstraintName("fk_aspnetusers_aspnetusers_modifieduserid");

                    b.Navigation("Company");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Taxi_Backend.Models.DriverQueue", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.Company", "Company")
                        .WithMany("DriverQueues")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driverqueue_company_companyid");

                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", "Driver")
                        .WithMany("DriverQueues")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_driverqueue_users_driverid");

                    b.HasOne("Taxi_Backend.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_driverqueue_trip_tripid");

                    b.Navigation("Company");

                    b.Navigation("Driver");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Taxi_Backend.Models.Taxi", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", "Driver")
                        .WithMany("Taxis")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_taxi_users_driverid");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Taxi_Backend.Models.Trip", b =>
                {
                    b.HasOne("Taxi_Backend.Models.DBModels.Company", "Company")
                        .WithMany("Trips")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_company_companyid");

                    b.HasOne("Taxi_Backend.Models.Customer", "Customer")
                        .WithMany("Trips")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_customer_customerid");

                    b.HasOne("Taxi_Backend.Models.DBModels.AppUser", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_trip_users_driverid");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Taxi_Backend.Models.Customer", b =>
                {
                    b.Navigation("CustomerQueues");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Taxi_Backend.Models.DBModels.AppUser", b =>
                {
                    b.Navigation("DriverQueues");

                    b.Navigation("Taxis");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Taxi_Backend.Models.DBModels.Company", b =>
                {
                    b.Navigation("CustomerQueues");

                    b.Navigation("DriverQueues");

                    b.Navigation("Trips");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
